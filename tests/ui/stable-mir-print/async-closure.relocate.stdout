// WARNING: This is highly experimental output it's intended for stable-mir developers only.
// If you find a bug or want to improve the output open a issue at https://github.com/rust-lang/project-stable-mir.
fn foo() -> () {
    let mut _0: ();
    let  _1: i32;
    let  _2: {async closure@$DIR/async-closure.rs:12:13: 12:21};
    let mut _3: &i32;
    debug y => _1;
    debug x => _2;
    bb0: {
        StorageLive(_1);
        _1 = 0_i32;
        StorageLive(_2);
        StorageLive(_3);
        _3 = &_1;
        _2 = {coroutine-closure@$DIR/async-closure.rs:12:13: 12:21}(move _3);
        StorageDead(_3);
        _0 = ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
fn foo::{closure#0}(_1: &{async closure@$DIR/async-closure.rs:12:13: 12:21}) -> {async closure body@$DIR/async-closure.rs:12:22: 14:6} {
    let mut _0: {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    let mut _2: &i32;
    let mut _3: &i32;
    debug y => (*((*_1).0: &i32));
    bb0: {
        StorageLive(_2);
        _3 = CopyForDeref(((*_1).0: &i32));
        _2 = &(*_3);
        _0 = {coroutine@$DIR/async-closure.rs:12:22: 14:6}(move _2);
        StorageDead(_2);
        return;
    }
}
fn foo::{closure#0}::{closure#0}(_1: Pin<&mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}>, _2: &mut Context<'_>) -> Poll<()> {
    let mut _0: Poll<()>;
    let  _3: i32;
    let  _4: &i32;
    let  _5: &i32;
    let mut _6: ();
    let mut _7: &mut Context<'_>;
    let mut _8: u32;
    let mut _9: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    let mut _10: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    let mut _11: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    debug _task_context => _7;
    debug y => (*_4);
    debug y => _3;
    debug y => _4;
    bb0: {
        _9 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb2, otherwise: bb3];
    }
    bb1: {
        _7 = move _2;
        StorageLive(_4);
        StorageLive(_5);
        _10 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        _5 = move (((*_10) as variant#0).0: &i32);
        _4 = move _5;
        StorageDead(_5);
        StorageLive(_3);
        _3 = (*_4);
        _6 = ();
        StorageDead(_3);
        StorageDead(_4);
        _0 = std::task::Poll::Ready(move _6);
        _11 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        discriminant((*_11) = 1;
        return;
    }
    bb2: {
        assert(false, `async fn` resumed after completion) -> [success: bb2, unwind unreachable];
    }
    bb3: {
        unreachable;
    }
}
fn foo::{closure#0}::{synthetic#0}(_1: Pin<&mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}>, _2: &mut Context<'_>) -> Poll<()> {
    let mut _0: Poll<()>;
    let  _3: i32;
    let  _4: &i32;
    let  _5: &i32;
    let mut _6: ();
    let mut _7: &mut Context<'_>;
    let mut _8: u32;
    let mut _9: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    let mut _10: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    let mut _11: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6};
    debug _task_context => _7;
    debug y => (*_4);
    debug y => _3;
    debug y => _4;
    bb0: {
        _9 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb2, otherwise: bb3];
    }
    bb1: {
        _7 = move _2;
        StorageLive(_4);
        StorageLive(_5);
        _10 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        _5 = move (((*_10) as variant#0).0: &i32);
        _4 = move _5;
        StorageDead(_5);
        StorageLive(_3);
        _3 = (*_4);
        _6 = ();
        StorageDead(_3);
        StorageDead(_4);
        _0 = std::task::Poll::Ready(move _6);
        _11 = CopyForDeref((_1.0: &mut {async closure body@$DIR/async-closure.rs:12:22: 14:6}));
        discriminant((*_11) = 1;
        return;
    }
    bb2: {
        assert(false, `async fn` resumed after completion) -> [success: bb2, unwind unreachable];
    }
    bb3: {
        unreachable;
    }
}
