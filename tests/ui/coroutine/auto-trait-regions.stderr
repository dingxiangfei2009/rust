error[E0626]: borrow may still be in use when coroutine yields
  --> $DIR/auto-trait-regions.rs:47:19
   |
LL |     let gen = #[coroutine] move || {
   |                            ------- within this coroutine
LL |         let a = A(&mut true, &mut true, No);
   |                   ^^^^^^^^^
...
LL |         yield;
   |         ----- possible yield occurs here
   |
help: add `static` to mark this coroutine as unmovable
   |
LL |     let gen = #[coroutine] static move || {
   |                            ++++++

error[E0626]: borrow may still be in use when coroutine yields
  --> $DIR/auto-trait-regions.rs:47:30
   |
LL |     let gen = #[coroutine] move || {
   |                            ------- within this coroutine
LL |         let a = A(&mut true, &mut true, No);
   |                              ^^^^^^^^^
...
LL |         yield;
   |         ----- possible yield occurs here
   |
help: add `static` to mark this coroutine as unmovable
   |
LL |     let gen = #[coroutine] static move || {
   |                            ++++++

error: implementation of `Foo` is not general enough
  --> $DIR/auto-trait-regions.rs:31:5
   |
LL |     assert_foo(gen);
   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough
   |
   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...
   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`

error: implementation of `Foo` is not general enough
  --> $DIR/auto-trait-regions.rs:31:5
   |
LL |     assert_foo(gen);
   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough
   |
   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...
   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: implementation of `Foo` is not general enough
  --> $DIR/auto-trait-regions.rs:31:5
   |
LL |     assert_foo(gen);
   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough
   |
   = note: `&'0 OnlyFooIfStaticRef` must implement `Foo`, for any lifetime `'0`...
   = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`

error: implementation of `Foo` is not general enough
  --> $DIR/auto-trait-regions.rs:53:5
   |
LL |     assert_foo(gen);
   |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough
   |
   = note: `Foo` would have to be implemented for the type `A<'0, '1>`, for any two lifetimes `'0` and `'1`...
   = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`

error: aborting due to 6 previous errors

For more information about this error, try `rustc --explain E0626`.
